apiVersion: v1
kind: Namespace
metadata:
  name: kfo-test

---
apiVersion: v1
kind: Namespace
metadata:
  name: kfo-badconfig

---
apiVersion: v1
kind: Pod
metadata:
  name: jpetstore
  namespace: kfo-test
  labels:
    msg: exceptions
    app: jpetstore
spec:
  containers:
  - image: tutum/curl
    name: jpetstore
    env:
    - name: EXCEPTION_URL
      value: https://gist.githubusercontent.com/jvassev/59d7616d601d9c19e23b328e591546d8/raw/22e32c7545b5f02f2df1cfaf621d91895c4d28b1/java.log
    command:
    - bash
    - -c
    - while true; do echo `date -R` [INFO] "jpetstore is logging $((var++))"; sleep 2; [[ $(($RANDOM % 4)) == 0 ]] && echo -n `date -R` [ERROR] "Internal error $((var++)) " && curl -Lsk $EXCEPTION_URL; done

---
apiVersion: v1
kind: Pod
metadata:
  name: jpetfile
  namespace: kfo-test
  labels:
    msg: exceptions-file
    app: jpetfile
spec:
  containers:
  - image: tutum/curl
    name: jpetstore
    env:
    - name: EXCEPTION_URL
      value: https://gist.githubusercontent.com/jvassev/59d7616d601d9c19e23b328e591546d8/raw/22e32c7545b5f02f2df1cfaf621d91895c4d28b1/java.log
    command:
    - bash
    - -c
    - while true; do echo `date -R` [INFO] "jpetstore is logging to file $((var++))"; sleep 4; [[ $(($RANDOM % 4)) == 0 ]] && echo -n `date -R` [ERROR] "Internal error file $((var++)) " && curl -Lsk $EXCEPTION_URL; done > /var/log/jpetfile.log
    volumeMounts:
    - mountPath: /var/log
      name: logs
  volumes:
  - name: logs
    emptyDir: {}

---
apiVersion: v1
kind: Pod
metadata:
  name: stdout-logger
  namespace: kfo-test
  labels:
    msg: stdout
spec:
  containers:
  - image: ubuntu
    name: main
    command:
    - bash
    - -c
    - while true; do echo `date -R` [INFO] "Random msg number $((var++)) to stdout"; sleep 2; done

---
apiVersion: v1
kind: Pod
metadata:
  name: hello-logger
  namespace: kfo-test
  labels:
    test-case: a
    msg: hello
spec:
  containers:
  - image: ubuntu
    name: greeter
    command:
    - bash
    - -c
    - while true; do echo `date -R` [INFO] "Random hello number $((var++)) to file"; sleep 2; [[ $(($var % 100)) == 0 ]] && :> /var/log/hello.log ;done > /var/log/hello.log
    volumeMounts:
    - mountPath: /var/log
      name: logs
    - mountPath: /host-root
      name: root
  volumes:
  - name: logs
    emptyDir: {}
  - name: root
    hostPath:
      path: /

---
apiVersion: v1
kind: Pod
metadata:
  name: welcome-logger
  namespace: kfo-test
  labels:
    test-case: b
    msg: welcome
spec:
  containers:
  - image: ubuntu
    name: test-container
    command:
    - bash
    - -c
    - while true; do echo `date -R` [INFO] "Random welcome number $((var++)) to file"; sleep 2; [[ $(($var % 100)) == 0 ]] && :> /var/log/welcome.log ;done > /var/log/welcome.log
    volumeMounts:
    - mountPath: /var/log
      name: logs
    - mountPath: /host-root
      name: root
  volumes:
  - name: logs
    emptyDir: {}
  - name: root
    hostPath:
      path: /

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-config
  namespace: kfo-test
data:
  fluent.conf: |
    <source>
      @type mounted-file
      path /var/log/hello.log
      labels msg=hello
    </source>
    <source>
      @type mounted-file
      path /var/log/welcome.log
      labels msg=welcome, _container=test-container
    </source>
    <source>
      @type mounted-file
      path /var/log/jpetfile.log
      labels app=jpetfile
    </source>
    <filter $labels(app=jpetstore)>
      @type detect_exceptions
      languages java
    </filter>
    <filter $labels(app=jpetfile)>
      @type detect_exceptions
      languages java
    </filter>
    <match $labels(msg=stdout)>
      @type copy
      <store>
        @type share
        with_namespace kfo-consumer
      </store>
      <store>
        @type share
        with_namespace no-such-namespace
      </store>
      <store>
        @type logzio_buffered
        endpoint_url https://listener.logz.io:8071?token=$LOGZ_TOKEN
      </store>
    </match>
    <match **>
      @type logzio_buffered
      endpoint_url https://listener.logz.io:8071?token=$LOGZ_TOKEN
    </match>

---
apiVersion: v1
kind: Namespace
metadata:
  name: kfo-consumer

---
apiVersion: v1
kind: Pod
metadata:
  name: stdout-logger
  namespace: kfo-consumer
  labels:
    msg: stdout
spec:
  containers:
  - image: ubuntu
    name: main
    command:
    - bash
    - -c
    - while true; do echo `date -R` [INFO] "In consumer -> random msg number $((var++)) to stdout"; sleep 2; done

---
apiVersion: v1
kind: Pod
metadata:
  name: just-a-pod
  namespace: kfo-badconfig
  labels:
    msg: stdout
spec:
  containers:
  - image: ubuntu
    name: main
    command:
    - bash
    - -c
    - while true; do echo `date -R` [INFO] "Random msg number $((var++)) to stdout"; sleep 2; done

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-config
  namespace: kfo-consumer
data:
  fluent.conf: |
    <label @$from(kfo-test)>
      <match **>
        @type elasticsearch
        include_tag_key false

        host "cloud.humio.com"
        path "/api/v1/dataspaces/sandbox/ingest/elasticsearch/"
        scheme "https"
        port "443"

        user "$HUMIO_KEY"
        password ""

        logstash_format true

        reload_connections "true"
        logstash_prefix "fluentd:kubernetes2humio"
        buffer_chunk_limit 1M
        buffer_queue_limit 32
        flush_interval 1s
        max_retry_wait 30
        disable_retry_limit
        num_threads 8
      </match>
    </label>

---


apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-config
  namespace: kfo-badconfig
data:
  fluent.conf: |
    # bad config: 
    <match **>
      @type logzio_buffered
      # the missing endpoint_url is what makes the config invalid
      #endpoint_url https://listener.logz.io:8071?token=<token>&type=<logtype>
      output_include_time true
      output_include_tags true
      buffer_type file
      flush_interval 10s
      buffer_chunk_limit 1m # Logz.io has bulk limit of 10M. We recommend set this to 1M, to avoid oversized bulks
    </match>

---